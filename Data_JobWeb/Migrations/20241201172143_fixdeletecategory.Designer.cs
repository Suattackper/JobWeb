// <auto-generated />
using System;
using Data_JobWeb.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_JobWeb.Migrations
{
    [DbContext(typeof(JobSeekerContext))]
    [Migration("20241201172143_fixdeletecategory")]
    partial class fixdeletecategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data_JobWeb.Entity.AuthenticationGrantedPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PK__authenti__3213E83F4C943339");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("authentication_granted_permissions", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.AuthenticationPermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PermissionDescri")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("permission_descri");

                    b.HasKey("PermissionId")
                        .HasName("PK__authenti__E5331AFA559E7FF8");

                    b.ToTable("authentication_permission", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.AuthenticationRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__authenti__760965CC6BFE40AD");

                    b.ToTable("authentication_role", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerApplicantProfileSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id");

                    b.Property<Guid?>("EnterpriseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("enterprise_id");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsDeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("is_deleted_at");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83F1E4AB249");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("job_seeker_applicant_profile_saved", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerCandidateProfile", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address_detail");

                    b.Property<string>("AvartarUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("avartar_url");

                    b.Property<string>("CvUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("cv_url");

                    b.Property<string>("District")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("district");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FacbookLink")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("facbook_link");

                    b.Property<string>("Fullname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("fullname");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("GithubUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("github_url");

                    b.Property<bool?>("IsAllowedPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_allowed_public");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsDeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("is_deleted_at");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LinkedinLink")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("linkedin_link");

                    b.Property<string>("PhoneNumb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_numb");

                    b.Property<string>("PortfolioUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("portfolio_url");

                    b.Property<string>("Province")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("province");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Slug")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("slug");

                    b.Property<string>("TwitterUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("twitter_url");

                    b.Property<string>("Ward")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ward");

                    b.HasKey("CandidateId")
                        .HasName("PK__job_seek__39BD4C188AE6E8E9");

                    b.HasIndex("RoleId");

                    b.ToTable("job_seeker_candidate_profile", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerCertificate", b =>
                {
                    b.Property<Guid>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("certificate_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id");

                    b.Property<string>("CertificateLink")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("certificate_link");

                    b.Property<string>("CertificateName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("certificate_name");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsDeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("is_deleted_at");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Organization")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("organization");

                    b.HasKey("CertificateId")
                        .HasName("PK__job_seek__E2256D31F6A5AB8B");

                    b.HasIndex("CandidateId");

                    b.ToTable("job_seeker_certificate", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerDistrict", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("district_name");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("province_code");

                    b.HasKey("Code")
                        .HasName("PK__job_seek__357D4CF830DFBA8A");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("job_seeker_district", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerEducationDetail", b =>
                {
                    b.Property<Guid>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("education_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Degree")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("degree");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsDeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("is_deleted_at");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Major")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("major");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("school_name");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("EducationId")
                        .HasName("PK__job_seek__45C0CFE73E934531");

                    b.HasIndex("CandidateId");

                    b.ToTable("job_seeker_education_detail", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerEnterprise", b =>
                {
                    b.Property<Guid>("EnterpriseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("enterprise_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_email");

                    b.Property<string>("CompanyPhoneContact")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("company_phone_contact");

                    b.Property<string>("CoverImgUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("cover_img_url");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descriptions");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("district");

                    b.Property<string>("EnterpriseSize")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("enterprise_size");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("facebook_url");

                    b.Property<DateOnly?>("FoundedDate")
                        .HasColumnType("date")
                        .HasColumnName("founded_date");

                    b.Property<string>("FullCompanyName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("full_company_name");

                    b.Property<bool?>("IsCensorship")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_censorship");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("JobFieldId")
                        .HasColumnType("int")
                        .HasColumnName("job_field_id");

                    b.Property<string>("LinkedinUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("province");

                    b.Property<string>("SlugImg")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("slug_img");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tax_code");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ward");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("website_url");

                    b.HasKey("EnterpriseId")
                        .HasName("PK__job_seek__A541BC651EBE1726");

                    b.HasIndex("JobFieldId");

                    b.ToTable("job_seeker_enterprise", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerEnterpriseFollowed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id");

                    b.Property<Guid?>("EnterpriseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("enterprise_id");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsDeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("is_deleted_at");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83F1E4AB212");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("job_seeker_enterprise_followed", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppIconName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("app_icon_name");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("JobCategoryName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("job_category_name");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83F22755607");

                    b.ToTable("job_seeker_job_category", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobField", b =>
                {
                    b.Property<int>("JobFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_field_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobFieldId"));

                    b.Property<string>("JobFieldName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("job_field_name");

                    b.HasKey("JobFieldId")
                        .HasName("PK__job_seek__326B06EF6FD2D7D7");

                    b.ToTable("job_seeker_job_field", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobLevelName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_level_name");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83FFBA46985");

                    b.ToTable("job_seeker_job_level", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AcademicLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("academic_level");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("BenefitEnjoyed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("benefit_enjoyed");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("district");

                    b.Property<Guid?>("EnterpriseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("ExpRequirement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("exp_requirement");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("datetime")
                        .HasColumnName("expired_time");

                    b.Property<string>("GenderRequire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender_require");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsDeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("is_deleted_at");

                    b.Property<bool?>("IsHot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_hot");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsUrgent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_urgent");

                    b.Property<int?>("JobCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("job_category_id");

                    b.Property<string>("JobDesc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("job_desc");

                    b.Property<int?>("JobLevelCode")
                        .HasColumnType("int")
                        .HasColumnName("job_level_code");

                    b.Property<string>("JobRequirement")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("job_requirement");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("job_title");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("province");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("SalaryMax")
                        .HasColumnType("int")
                        .HasColumnName("salary_max");

                    b.Property<int?>("SalaryMin")
                        .HasColumnType("int")
                        .HasColumnName("salary_min");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status_code");

                    b.Property<DateTime?>("TimePost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("time_post")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ward");

                    b.Property<string>("WorkingType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("working_type");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83FB1615EAF");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobLevelCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("job_seeker_job_posting", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobPostingApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApplyTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("apply_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id");

                    b.Property<Guid?>("JobPostingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_posting_id");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status_code");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83F2C653C72");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("StatusCode");

                    b.ToTable("job_seeker_job_posting_apply", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid?>("IdConcern")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("concern_id");

                    b.Property<Guid?>("IdUserReceive")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsSeen")
                        .HasColumnType("bit")
                        .HasColumnName("is_seen");

                    b.Property<bool?>("IsSent")
                        .HasColumnType("bit")
                        .HasColumnName("is_sent");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83F63136065");

                    b.ToTable("job_seeker_notification", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerNotificationType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<Guid?>("IdUser")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user");

                    b.Property<DateTime?>("IsCreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("is_create_at");

                    b.Property<string>("TypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83FFFCA9F52");

                    b.ToTable("job_seeker_notification_type", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerProvince", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<string>("ProvinceName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("province_name");

                    b.HasKey("Code")
                        .HasName("PK__job_seek__357D4CF8DE0F9512");

                    b.ToTable("job_seeker_province", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerRecruiterProfile", b =>
                {
                    b.Property<Guid>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recruiter_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AvatarLink")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("avatar_link");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<Guid?>("EnterpriseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Fullname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("fullname");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LinkedinUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("PhoneNumb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_numb");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("RecruiterId")
                        .HasName("PK__job_seek__42ABA257E995083D");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("RoleId");

                    b.ToTable("job_seeker_recruiter_profile", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerSavedJobPosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("JobPostingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_posting_id");

                    b.Property<DateTime?>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("saved_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83FEFE1919E");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("job_seeker_saved_job_posting", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerStatusCode", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("id");

                    b.Property<string>("CodeValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("code_value");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83F32974630");

                    b.ToTable("job_seeker_status_code", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerUserLoginDataExternal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("ExternalProviderToken")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("external_provider_token");

                    b.Property<string>("ExtraData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("extra_data");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("provider_name");

                    b.Property<string>("WsEndpoint")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ws_endpoint");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83FBF2934B2");

                    b.ToTable("job_seeker_user_login_data_external", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerUserLoginDatum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AvartarUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("avartar_url");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("EmailVerified")
                        .HasColumnType("bit")
                        .HasColumnName("email_verified");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDisable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_disable");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastActiveTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_active_time");

                    b.Property<string>("Password")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status_code");

                    b.HasKey("Id")
                        .HasName("PK__job_seek__3213E83F122A0F1D");

                    b.HasIndex("StatusCode");

                    b.HasIndex(new[] { "Email" }, "UQ__job_seek__AB6E6164D4EE156A")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("job_seeker_user_login_data", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerWard", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("district_code");

                    b.Property<string>("WardName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ward_name");

                    b.HasKey("Code")
                        .HasName("PK__job_seek__357D4CF802F04ADC");

                    b.HasIndex("DistrictCode");

                    b.ToTable("job_seeker_ward", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerWorkingExperience", b =>
                {
                    b.Property<Guid>("WorkingExpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("working_exp_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("company_name");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IsDeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("is_deleted_at");

                    b.Property<DateTime?>("IsUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("is_updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("job_title");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("WorkingExpId")
                        .HasName("PK__job_seek__1BBADB9CB7BAB0B3");

                    b.HasIndex("CandidateId");

                    b.ToTable("job_seeker_working_experience", (string)null);
                });

            modelBuilder.Entity("Data_JobWeb.Entity.AuthenticationGrantedPermission", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.AuthenticationPermission", "Permission")
                        .WithMany("AuthenticationGrantedPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("permission_id_fk");

                    b.HasOne("Data_JobWeb.Entity.AuthenticationRole", "Role")
                        .WithMany("AuthenticationGrantedPermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("role_id_fk");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerApplicantProfileSaved", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerCandidateProfile", "Candidate")
                        .WithMany("JobSeekerApplicantProfileSaveds")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("profile_saved_candidate_id_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerEnterprise", "Enterprise")
                        .WithMany("JobSeekerApplicantProfileSaveds")
                        .HasForeignKey("EnterpriseId")
                        .HasConstraintName("profile_saved_enterprise_id_fk");

                    b.Navigation("Candidate");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerCandidateProfile", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerUserLoginDataExternal", "Candidate")
                        .WithOne("JobSeekerCandidateProfile")
                        .HasForeignKey("Data_JobWeb.Entity.JobSeekerCandidateProfile", "CandidateId")
                        .IsRequired()
                        .HasConstraintName("candidate_id_external_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerUserLoginDatum", "CandidateNavigation")
                        .WithOne("JobSeekerCandidateProfile")
                        .HasForeignKey("Data_JobWeb.Entity.JobSeekerCandidateProfile", "CandidateId")
                        .IsRequired()
                        .HasConstraintName("candidate_id_fk");

                    b.HasOne("Data_JobWeb.Entity.AuthenticationRole", "Role")
                        .WithMany("JobSeekerCandidateProfiles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("role_id_two_fk");

                    b.Navigation("Candidate");

                    b.Navigation("CandidateNavigation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerCertificate", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerCandidateProfile", "Candidate")
                        .WithMany("JobSeekerCertificates")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("certificate_candidate_id_fk");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerDistrict", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerProvince", "ProvinceCodeNavigation")
                        .WithMany("JobSeekerDistricts")
                        .HasForeignKey("ProvinceCode")
                        .HasConstraintName("province_code_fk");

                    b.Navigation("ProvinceCodeNavigation");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerEducationDetail", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerCandidateProfile", "Candidate")
                        .WithMany("JobSeekerEducationDetails")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("education_detail_candidate_id_fk");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerEnterprise", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerJobField", "JobField")
                        .WithMany("JobSeekerEnterprises")
                        .HasForeignKey("JobFieldId")
                        .HasConstraintName("job_field_id_fk");

                    b.Navigation("JobField");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerEnterpriseFollowed", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerCandidateProfile", "Candidate")
                        .WithMany("JobSeekerEnterpriseFolloweds")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("enterprise_followed_candidate_id_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerEnterprise", "Enterprise")
                        .WithMany("JobSeekerEnterpriseFolloweds")
                        .HasForeignKey("EnterpriseId")
                        .HasConstraintName("enterprise_followed_enterprise_id_fk");

                    b.Navigation("Candidate");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobPosting", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerEnterprise", "Enterprise")
                        .WithMany("JobSeekerJobPostings")
                        .HasForeignKey("EnterpriseId")
                        .HasConstraintName("job_posting_enterprise_id_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerJobCategory", "JobCategory")
                        .WithMany("JobSeekerJobPostings")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("job_posting_job_category_id_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerJobLevel", "JobLevelCodeNavigation")
                        .WithMany("JobSeekerJobPostings")
                        .HasForeignKey("JobLevelCode")
                        .HasConstraintName("job_posting_job_level_code_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerStatusCode", "StatusCodeNavigation")
                        .WithMany("JobSeekerJobPostings")
                        .HasForeignKey("StatusCode")
                        .HasConstraintName("job_posting_status_code_fk");

                    b.Navigation("Enterprise");

                    b.Navigation("JobCategory");

                    b.Navigation("JobLevelCodeNavigation");

                    b.Navigation("StatusCodeNavigation");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobPostingApply", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerCandidateProfile", "Candidate")
                        .WithMany("JobSeekerJobPostingApplies")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("job_apply_candidate_id_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerJobPosting", "JobPosting")
                        .WithMany("JobSeekerJobPostingApplies")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("job_posting_id_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerStatusCode", "StatusCodeNavigation")
                        .WithMany("JobSeekerJobPostingApplies")
                        .HasForeignKey("StatusCode")
                        .HasConstraintName("job_apply_status_code_fk");

                    b.Navigation("Candidate");

                    b.Navigation("JobPosting");

                    b.Navigation("StatusCodeNavigation");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerRecruiterProfile", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerEnterprise", "Enterprise")
                        .WithMany("JobSeekerRecruiterProfiles")
                        .HasForeignKey("EnterpriseId")
                        .HasConstraintName("enterprise_id_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerUserLoginDatum", "Recruiter")
                        .WithOne("JobSeekerRecruiterProfile")
                        .HasForeignKey("Data_JobWeb.Entity.JobSeekerRecruiterProfile", "RecruiterId")
                        .IsRequired()
                        .HasConstraintName("recruiter_id_fk");

                    b.HasOne("Data_JobWeb.Entity.AuthenticationRole", "Role")
                        .WithMany("JobSeekerRecruiterProfiles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("role_id_three_fk");

                    b.Navigation("Enterprise");

                    b.Navigation("Recruiter");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerSavedJobPosting", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerCandidateProfile", "Candidate")
                        .WithMany("JobSeekerSavedJobPostings")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("saved_job_candidate_id_fk");

                    b.HasOne("Data_JobWeb.Entity.JobSeekerJobPosting", "JobPosting")
                        .WithMany("JobSeekerSavedJobPostings")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("saved_job_posting_id_fk");

                    b.Navigation("Candidate");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerUserLoginDatum", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerStatusCode", "StatusCodeNavigation")
                        .WithMany("JobSeekerUserLoginData")
                        .HasForeignKey("StatusCode")
                        .HasConstraintName("user_login_data_status_code_fk");

                    b.Navigation("StatusCodeNavigation");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerWard", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerDistrict", "DistrictCodeNavigation")
                        .WithMany("JobSeekerWards")
                        .HasForeignKey("DistrictCode")
                        .HasConstraintName("district_code_fk");

                    b.Navigation("DistrictCodeNavigation");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerWorkingExperience", b =>
                {
                    b.HasOne("Data_JobWeb.Entity.JobSeekerCandidateProfile", "Candidate")
                        .WithMany("JobSeekerWorkingExperiences")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("working_exp_candidate_id_fk");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.AuthenticationPermission", b =>
                {
                    b.Navigation("AuthenticationGrantedPermissions");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.AuthenticationRole", b =>
                {
                    b.Navigation("AuthenticationGrantedPermissions");

                    b.Navigation("JobSeekerCandidateProfiles");

                    b.Navigation("JobSeekerRecruiterProfiles");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerCandidateProfile", b =>
                {
                    b.Navigation("JobSeekerApplicantProfileSaveds");

                    b.Navigation("JobSeekerCertificates");

                    b.Navigation("JobSeekerEducationDetails");

                    b.Navigation("JobSeekerEnterpriseFolloweds");

                    b.Navigation("JobSeekerJobPostingApplies");

                    b.Navigation("JobSeekerSavedJobPostings");

                    b.Navigation("JobSeekerWorkingExperiences");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerDistrict", b =>
                {
                    b.Navigation("JobSeekerWards");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerEnterprise", b =>
                {
                    b.Navigation("JobSeekerApplicantProfileSaveds");

                    b.Navigation("JobSeekerEnterpriseFolloweds");

                    b.Navigation("JobSeekerJobPostings");

                    b.Navigation("JobSeekerRecruiterProfiles");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobCategory", b =>
                {
                    b.Navigation("JobSeekerJobPostings");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobField", b =>
                {
                    b.Navigation("JobSeekerEnterprises");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobLevel", b =>
                {
                    b.Navigation("JobSeekerJobPostings");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerJobPosting", b =>
                {
                    b.Navigation("JobSeekerJobPostingApplies");

                    b.Navigation("JobSeekerSavedJobPostings");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerProvince", b =>
                {
                    b.Navigation("JobSeekerDistricts");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerStatusCode", b =>
                {
                    b.Navigation("JobSeekerJobPostingApplies");

                    b.Navigation("JobSeekerJobPostings");

                    b.Navigation("JobSeekerUserLoginData");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerUserLoginDataExternal", b =>
                {
                    b.Navigation("JobSeekerCandidateProfile");
                });

            modelBuilder.Entity("Data_JobWeb.Entity.JobSeekerUserLoginDatum", b =>
                {
                    b.Navigation("JobSeekerCandidateProfile");

                    b.Navigation("JobSeekerRecruiterProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
